#!/usr/bin/python
#

import sys
import re

rx_completed = "Completed backup from ([a-zA-Z0-9]+) in .+: (\d+) files \(([0-9\.KMGTB]+)\) backed up, ([0-9\.KMGTB]+) received @ ([0-9\.KMGTbps]+)"

completed = {}

def parse_completed(line):

	match = re.search( rx_completed, line )
	server = match.group(1)
	files = int( match.group(2) )
	size = parse_bytes( match.group(3) )
	transfer = parse_bytes( match.group(4) )
	speed = parse_bytes( match.group(5) )

	if ( server in completed ):
		completed[ server ][ "count" ] += 1
		completed[ server ][ "files" ] += files
		completed[ server ][ "size" ] += size
		completed[ server ][ "transfer" ] += transfer
		completed[ server ][ "speed" ] += speed
	else:
		completed[ server ] = { "count": 1, "files": files, "size": size, "transfer": transfer, "speed": speed }
 
def print_completed():
	print " server     |   size   |  files   | transfer | avg speed"
	print "------------+----------+----------+----------+--------------"

	for name in completed:
		server = completed[ name ]
		files = server[ "files" ]
		size = humanize_bytes(server[ "size" ])
		transfer = humanize_bytes(server[ "transfer" ])
		speed = humanize_bytes( server[ "speed" ] / server[ "count" ] )
		print " %-10s | %-8s | % 8d | %-8s | %s/s" % (name, size, files, transfer, speed)

def parse_bytes(string):

	rx_size = "([0-9\.]+)([A-Z])?";
	match = re.search( rx_size, string );
	size = float( match.group(1) )
	suffix = match.group(2)

	if suffix == 'K':
		return size * 1024
	if suffix == 'M':
		return size * 1024 * 1024
	if suffix == 'G':
		return size * 1024 * 1024
	if suffix == 'T':
		return size * 1024 * 1024 * 1024

	return size


def humanize_bytes(bytes, precision=1):
    """Return a humanized string representation of a number of bytes.

    Assumes `from __future__ import division`.

    >>> humanize_bytes(1)
    '1 byte'
    >>> humanize_bytes(1024)
    '1.0 kB'
    >>> humanize_bytes(1024*123)
    '123.0 kB'
    >>> humanize_bytes(1024*12342)
    '12.1 MB'
    >>> humanize_bytes(1024*12342,2)
    '12.05 MB'
    >>> humanize_bytes(1024*1234,2)
    '1.21 MB'
    >>> humanize_bytes(1024*1234*1111,2)
    '1.31 GB'
    >>> humanize_bytes(1024*1234*1111,1)
    '1.3 GB'
    """
    abbrevs = (
        (1<<50L, 'PB'),
        (1<<40L, 'TB'),
        (1<<30L, 'GB'),
        (1<<20L, 'MB'),
        (1<<10L, 'kB'),
        (1, 'bytes')
    )
    if bytes == 1:
        return '1 byte'
    for factor, suffix in abbrevs:
        if bytes >= factor:
            break
    return '%.*f %s' % (precision, bytes / factor, suffix)		

for line in sys.stdin.readlines():
	if ( re.search( rx_completed, line) ): 
		parse_completed( line )


print_completed()
